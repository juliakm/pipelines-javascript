variables:
  myInner: someValue
  myOuter: $(myInner)
  myPredefinedVar: $(Build.SourcesDirectory)
  myPredefinedVarTwo: $(myPredefinedVar)
  TAG: $(Build.RequestedForId)

steps:
- script: echo $(myOuter)  # prints "someValue"
  displayName: Variable is $(myOuter)  # prints "Variable is someValue"
  
- script: echo $(myOuter)  # prints "someValue"
  displayName: Variable is ${{ variables.myOuter }}  # display name is "Variable is someValue"

- script: echo $(myPredefinedVarTwo)  # prints /home/vsts/work/1/s
  displayName: Variable is ${{ variables.myPredefinedVarTwo }}  # prints "Variable is /home/vsts/work/1/s"

- script: echo $(myPredefinedVar)  # prints /home/vsts/work/1/s
  displayName: Variable is ${{ variables.myPredefinedVar }}  # prints "Variable is /home/vsts/work/1/s"

- script: echo $(TAG) 
  displayName: 'docker build test:$(TAG)'



# trigger: 
# - master

# steps:
#   - bash: |
#       echo "##vso[task.setvariable variable=Sauce;]crushed tomatoes"
#       echo "##vso[task.setvariable variable=secretSauce;]crushed tomatoes with garlic"
#     name: SetVars
#   - bash: 
#       echo "Sauce is $(sauce)"
#       echo "secretSauce is $(secretSauce)"
#     name: OutputVars



# stages:
#   - stage: 'first'
#     jobs:
#     - job: 'firststage_job1'
#       steps:
#       - script: |
#               echo "attempt is changing with number of attempts"
#               echo "current attempt is $(system.stageattempt)"
#               echo "current checks is $(checks.stageattempt)"
#               exit 1
#         target:
#           settableVariables:
#           - foo
#         displayName: 'ischanging-$(system.stageattempt)'     
#         continueOnError: true
#   - stage: 'second'
#     dependsOn: 
#     - first
#     jobs:
#     - deployment: DeployWeb1
#       timeoutInMinutes: 7200
#       displayName: job1
#       environment: 
#         name: ContosoDeploy
#         resourceType: VirtualMachine
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - script: |
#                 echo "attempt is changing with number of attempts"
#                 echo "current attempt is $(system.stageattempt)"
#                 echo "current checks attempt is $(checks.stageattempt)"
#                 exit 1
#               displayName: "notchanging-$(system.stageattempt)"
#               continueOnError: true


# # jobs:
# # - job: 'firststage_job1'
# #   steps:
#   # - task: AzureFunction@1
#   #   displayName: FunctionTry $(System.StageAttempt)
#   #   inputs:
#   #     function: 'https://myfunctionappgh.azurewebsites.net/api/httptriggercsharp1'
#   #     key: '$(myFunctionKey)'
#   #     method: 'POST'
#   #     queryParameters: 'name=$(myVar)$(System.StageAttempt)'
#   #     waitForCompletion: 'false'
#   # - stage: 'second'
#   #   dependsOn:
#   #     - first
#   #   condition: eq(variables['Checks.JobAttempt'], '1')
# jobs:
#   - deployment: FunctionTwo
#     timeoutInMinutes: 7200
#     displayName: job1
#     environment:
#       name: ContosoDeploy
#       resourceType: VirtualMachine
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - task: AzureFunction@1
#               displayName: FunctionTry $(Checks.StageAttempt)
#               inputs:
#                 function: 'https://myfunctionappgh.azurewebsites.net/api/httptriggercsharp1'
#                 key: '$(myFunctionKey)'
#                 method: 'POST'
#                 queryParameters: 'name=$(myVar)$(Checks.StageAttempt)'
#                 waitForCompletion: 'false'
#               continueOnError: true
#             # - task: InvokeRESTAPI@1
#             #   inputs:
#             #     connectionType: 'connectedServiceName'
#             #     serviceConnection: 'open library'
#             #     method: 'POST'
#             #     urlSuffix: 'api/books?bibkeys=ISBN:0201558025,LCCN:93005405&format=json'
#             #     waitForCompletion: 'true'


#     # jobs:
#     # - job: 'secondstage_job1'
#     #   steps:
#     #   - task: AzureFunction@1
#     #     inputs:
#     #       function: 'https://myfunctionappgh.azurewebsites.net/api/httptriggercsharp1'
#     #       key: '$(myFunctionKey)'
#     #       method: 'POST'
#     #       queryParameters: 'name=$(checks.stageattempt)'
#     #       waitForCompletion: 'false'
# # - script: |
# #           echo "attempt is changing with number of attempts"
# #           echo "current attempt is $(system.stageattempt)"
# #           echo "current checks is $(checks.stageattempt)"
# #           exit 1


