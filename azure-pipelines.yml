pool:
  vmImage: 'ubuntu-latest'

# test and upload my code as an artifact named WebSite
jobs:
- job: Build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: npm test
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)'
      artifactName: WebSite

# download the artifact and deploy it only if the build job succeeded
- job: Deploy
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: WebSite
      downloadPath: $(System.DefaultWorkingDirectory)

  dependsOn: Build
  condition: succeeded()
    
# variables:
# - group: my-variable-group
# - name: my-passed-variable
#   value: $[variables.myhello]

# steps:
# - script: echo $(myhello) # uses macro syntax
# - script: echo $(my-passed-variable) 


# variables:
# - name: one
#   value: initialValue 

# steps:
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one)
#     displayName: First variable pass
#   - script: echo '##vso[task.setvariable variable=one]secondValue'
#     displayName: Set new variable value
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one) # will be initialValue
#     displayName: Second variable pass
  
  # bash: |
  #     echo $(foo)            # This will be bar
  #     echo '##vso[task.setvariable variable=foo]baz'
  #     echo $(foo)            # This will also be bar, $(foo) expands before the step
  # - bash: echo $(foo)        # This will be baz. The variable is expanded just before the step


# parameters:
# - name: myArray
#   type: object
#   default:
#     - FOO
#     - BAR
#     - ZOO

# variables:
#    A: ${{ join(';',parameters.myArray) }} # outputs FOO;BAR;ZOO

# steps:
#   - script: echo $A