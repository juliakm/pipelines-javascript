# trigger: none

# jobs:
# - job: A
#   steps:
#   - download: current
#     artifact: myApp
#   # track deployments on the environment
# - deployment: DeployWeb
#   displayName: deploy Web App
#   pool:
#     vmImage: 'Ubuntu-16.04'
#   workspace:
#    clean: all
#   # creates an environment if it doesn't exist
#   environment: 'smarthotel-dev'
#   strategy:
#     # default deployment strategy, more coming...
#     runOnce:
#       deploy:
#         steps:
#         - script: echo my first deployment

# stages:
# - stage: A
#   jobs:
#   - job: jA
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: 'true'
# - stage: B
#   dependsOn: A
#   jobs:
#   - job: jB
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#      - script: 'fail'
# - stage: COK
#   dependsOn: B
#   jobs:
#   - job: jC
#     pool: 
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: 'true'
# - stage: CKO
#   dependsOn: B
#   condition: failed()
#   jobs:
#   - job: jC
#     pool: 
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: 'true'
# - stage: D
#   dependsOn: ['COK', 'CKO']
#   condition: or(succeeded('COK'), succeeded('CKO'))
#   jobs:
#   - job: jD
#     pool: 
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: 'true'
# - stage: E
#   dependsOn: D
#   condition: succeeded('D')
#   jobs:
#   - job: jE
#     pool: 
#       vmImage: 'ubuntu-latest'
#     steps:
#       - script: 'true'

parameters:
  - name: items
    type: string
    default: two
    values:
    - one
    - two
    - three
  
trigger: none

steps: 
- script: echo ${{ parameters.items }}
- ${{ if eq(join(';', parameters.items), 'two') }}:
  - script: echo "Items"
- script: echo $[join($parameters.items, ';')]


# variables:
#   a: $[lower('FOO')]
#   b: $[upper('bah')]
#   c: $[length('fabrikam')]
#   d: $[replace('https://www.tinfoilsecurity.com/saml/consume','https://www.tinfoilsecurity.com','http://server')]


# trigger: none

# pool:
#   vmImage: 'ubuntu-latest'

# steps:
# - script: echo $(a)
# - script: echo $(b)
# - script: echo $(c)
# - script: echo $(d)

  # ${{ if eq(join('', parameters.items), '') }}:
  


# trigger: none

# strategy:
#   matrix:
#     windows:
#       OS_PLAT: windows
#       IMAGE: windows-latest
#     windows-core:
#       OS_PLAT: windows
#       IMAGE: windows-latest
#       USE_PSCORE: true
#     linux:
#       OS_PLAT: linux
#       IMAGE: ubuntu-latest
#       USE_PSCORE: true

# pool:
#   vmImage: $[ variables.IMAGE ]

# steps:
# - template: shared-steps.yml



# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# resources:
#  packages:
#    - package: npmpackage
#      type: npm
#      endpoint: my-npm-connection
#      name: juliakm/tiny



# stages:
# - stage: A
#   condition: false
#   jobs:
#   - job: A1
#     steps:
#     - script: echo Job A1
# - stage: B
#   condition: in(dependencies.A.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
#   jobs:
#   - job: B1
#     steps:
#     - script: echo Job B1

# stages:
# - stage: A
#   jobs:
#   - job: A1
#     steps:
#      - script: echo "##vso[task.setvariable variable=skipsubsequent;isOutput=true]false"
#        name: printvar
#      - script: echo "##vso[task.setvariable variable=stageexists;isOutput=true]true"
#        name: stagevar

# - stage: B
#   condition: and(succeeded(), ne(dependencies.A.A1.outputs['printvar.skipsubsequent'], 'true'))
#   dependsOn: A
#   jobs:
#   - job: B1
#     steps:
#     - script: echo hello from Stage B
#   - job: B2
#     condition: ne(stageDependencies.A.A1.outputs['stagevar.stageexists'], 'true')
#     steps:
#      - script: echo hello from Stage B2

# jobs:
# - job:
#   variables:
#     a: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 100)]
#     b: $[pipeline.startTime]
#     c: $(pipeline.startTime)
#     d: $(system.pipelineStartTime)
#     #e: $[counter(format('{0:yyyyMMdd}', system.pipelineStartTime), 100)] 

#   steps:
#   - bash: echo $(a) #outputs 102
#   - bash: echo $(b) #outputs 2020-05-11 16:36:13-05:00
#   - script: echo $(c) #outputs echo $(pipeline.startTime)
#   - script: echo $(d) #outputs 2020-05-11 16:36:13-05:00
#   #- script: echo $(e) #error!
#   - script: echo $(pipeline.startTime) #outputs echo $(pipeline.startTime) # throws error
#   - script: echo $(system.pipelineStartTime) #outputs 2020-05-11 16:36:13-05:00