pool:
  vmImage: 'ubuntu-latest'

# test and upload my code as an artifact named WebSite
jobs:
# Set an output variable in a lifecycle hook of a deployment job executing runOnce strategy
- deployment: A
  pool:
    vmImage: 'ubuntu-16.04'
  environment: staging
  strategy:                  
    runOnce:
      deploy:
        steps:
        - script: echo "##vso[task.setvariable variable=myOutputVar;isOutput=true]this is the deployment variable value"
          name: setvarStep
        - script: echo $(setvarStep.myOutputVar)
          name: echovar

# Map the variable from the job
- job: B
  dependsOn: A
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    myVarFromDeploymentJob: $[ dependencies.A.outputs['A.setvarStep.myOutputVar'] ]
  steps:
  - script: "echo $(myVarFromDeploymentJob)"
    name: echovar
    
# variables:
# - group: my-variable-group
# - name: my-passed-variable
#   value: $[variables.myhello]

# steps:
# - script: echo $(myhello) # uses macro syntax
# - script: echo $(my-passed-variable) 


# variables:
# - name: one
#   value: initialValue 

# steps:
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one)
#     displayName: First variable pass
#   - script: echo '##vso[task.setvariable variable=one]secondValue'
#     displayName: Set new variable value
#   - script: |
#       echo ${{ variables.one }} # outputs initialValue
#       echo $(one) # will be initialValue
#     displayName: Second variable pass
  
  # bash: |
  #     echo $(foo)            # This will be bar
  #     echo '##vso[task.setvariable variable=foo]baz'
  #     echo $(foo)            # This will also be bar, $(foo) expands before the step
  # - bash: echo $(foo)        # This will be baz. The variable is expanded just before the step


# parameters:
# - name: myArray
#   type: object
#   default:
#     - FOO
#     - BAR
#     - ZOO

# variables:
#    A: ${{ join(';',parameters.myArray) }} # outputs FOO;BAR;ZOO

# steps:
#   - script: echo $A